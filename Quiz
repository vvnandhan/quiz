import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.layers import LSTM, Dense

# Define hyperparameters
look_back = 30  # Number of past time steps to consider
epochs = 100  # Number of training epochs

# Load your time series data (replace 'data.csv' with your filename)
data = pd.read_csv('data.csv')

# Scale the data (MinMaxScaler recommended for time series)
scaler = MinMaxScaler(feature_range=(0, 1))
data_scaled = scaler.fit_transform(data)

# Split data into features and target
X = []
y = []
for i in range(look_back, len(data_scaled)):
  X.append(data_scaled[i-look_back:i, :])
  y.append(data_scaled[i, :])

X = np.array(X)
y = np.array(y)

# Reshape X for LSTM (samples, time steps, features)
X = X.reshape(X.shape[0], X.shape[1], data.shape[1])

# Build LSTM model
model = keras.Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(X.shape[1], X.shape[2])))
model.add(LSTM(units=50))
model.add(Dense(units=data.shape[1]))  # Number of features to predict

# Compile the model
model.compile(loss='mse', optimizer='adam')

# Train the model
model.fit(X, y, epochs=epochs, batch_size=32)

# Make predictions on unseen data (replace with actual data)
future_data = data.tail(look_back)
future_data_scaled = scaler.transform(future_data)
future_X = future_data_scaled.reshape(1, look_back, data.shape[1])
predicted_data = model.predict(future_X)

# Invert scaling for predicted values
predicted_data_inverted = scaler.inverse_transform(predicted_data)



